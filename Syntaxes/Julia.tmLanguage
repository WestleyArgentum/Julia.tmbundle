<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>j</string>
		<string>jl</string>
		<string>jul</string>
		<string>julia</string>
	</array>
	<key>firstLineMatch</key>
	<string>^#!/usr/bin/env\s+julia\s*$</string>
	<key>foldingStartMarker</key>
	<string>^\s*(?:if|while|for|begin|function|struct|macro|module|type|let)\b(?!.*\bend\b).*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*(?:end)\b.*$</string>
	<key>name</key>
	<string>Julia</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#function_decl</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function_call</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#type_decl</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#keyword</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operator</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#number</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>bracket</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?:\(|\)|\[|\]|\{|\}|,)</string>
					<key>name</key>
					<string>keyword.bracket.julia</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.julia</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\$)(#)(?!\{).*$\n?</string>
					<key>name</key>
					<string>comment.line.number-sign.julia</string>
				</dict>
			</array>
		</dict>
		<key>function_call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([a-zA-Z0-9_]+)\w*\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>meta.function.call.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function_decl</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(function)\w*([a-zA-Z0-9_]+)\w*\(</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.julia</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>name</key>
					<string>meta.function.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>keyword</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?:exit|whos|edit|load|is|isa?|is(equal|less)|typeof|n?tuple|uid|hash|finalizer|copy|convert|promote|sub|type(min|max)|real(min|max)|sizeof|eps|promote_type|method_exists|applicable|invoke|start|done|next|isempty|numel|length|contains|reduce|m(ax|in)|sum|prod|any|all|countp?|anyp|allp|map|ref|assign|has|get|d(el|el_all)|add|intset|choose|union|push|pop|enqueue|shift|insert|del|grow|append!|append|str(len|cat|ing|chr)|cstring|(l|r)pad|split|join|ch(op|omp)|ind2chr|chr2ind|std(out|err|in)_stream|open|memio|fdio|flush|close|with_output_stream|write|read|position|seek|skip|current_output_stream|set_current_output_stream|show|print(ln)?|showall|dump|read(all|line|until|lines)|each_line|dlm(read|write)|csv(read|write)|div|fld|mod|sin|cos|tan|sinh|cosh|tanh|asin|acos|atan|atan2|sec|csc|cot|asec|acsc|acot|sech|csch|coth|acosh|asinh|atanh|asech|acsch|acoth|sinc|cosc|hypot|log|log2|log10|log1p|logb|ilobg|exp|expm1|exp2|ldexp|ceil|floor|trunc|round|iceil|ifloor|itrunc|iround|ipart|fpart|min|max|clamp|abs|abs2|copysign|sign|signbit|pow|sqrt|cbrt|erf|erfc|gamma|lgamma|lfact|besselj0|besselj1|bessely1|bessely0|real|imag|conj|angle|cis|binomial|factorial|gcd|lcm|nextpow2|powermod|eps|bin|hex|dec|oct|int2str|parse_int|bool|u?int(8|16|32|64)|float(32|64)|char|safe_char|complex|is(complex|real)|bswap|num2hex|hex2num|one|zero|isdenormal|isfinite|isnan|nextfloat|prevfloat|integer_valued|real_valued|exponent|mantissa|rand(f|i|bit|bool|n|g|chi2|exp)|srand|ndimds|size|eltype|numel|nnz|strides?|ref|cell|zeros|ones|trues|falses|fill!|fill|reshape|copy|similar|empty|reinterpret|eye|linspace|sub|slicedim|assign|cat|vcat|hcat|hvcat|flip(dim|pud|plr)|circshift|findn?|permute|ipermute|squeeze|dot|cross|norm|chol|lu|qr|eig|svd|tri(u|l)|diagm?|rank|cond|trace|det|inv|repmat|kron|linreg|sort!|sort|sortr!|sortr|sortperm|issorted|nthperm!|nthperm|rand(perm|cycle)|shuffle!|shuffle|reverse!|reverse|select!|select|mean|std|median|histc?|i?fft(2|3|n|shift)|deconv|conv|xcorr|addprocs_(local|ssh|sge)|nprocs|myid|remote_call|wait|fetch|remote_call_(wait|fetch)|put|take|d(array|zeros|ones|fill|randn?|cell|istribute)|localize|changedist|myindexes|owner|procs|distdim|system|get(hostname|ipaddr|cwd|pid)|setcwd|time|t(ic|oc|oq)|dl(open|sym)|error|throw|strerror|assert|yieldto|current_task|istaskdone|consume|produce|make_scheduled|yield|tls)</string>
					<key>name</key>
					<string>support.function.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:function|type|macro|quote|abstract|bitstype|typealias|module|new)\b</string>
					<key>name</key>
					<string>keyword.other.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:if|else|elseif|while|for|begin|let|end|do|try|catch|return|break|continue)\b</string>
					<key>name</key>
					<string>keyword.control.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?:global|local|const|export|import)\b</string>
					<key>name</key>
					<string>storage.modifier.variable.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>@\w+\b</string>
					<key>name</key>
					<string>support.macro.julia</string>
				</dict>
			</array>
		</dict>
		<key>number</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>((\b0(x|X)[0-9a-fA-F]*)|((\b[0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]*)?(im)?|\bInf(32)?\b|\bNaN(32)?\b)</string>
					<key>name</key>
					<string>constant.numeric.julia</string>
				</dict>
			</array>
		</dict>
		<key>operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?:=|:=|\+=|-=|\*=|/=|//=|\.//=|\.\*=|\\=|\.\\=|^=|\.^=|%=|\|=|&amp;=|\$=|&lt;&lt;=|&gt;&gt;=)</string>
					<key>name</key>
					<string>keyword.operator.update.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\?|:)</string>
					<key>name</key>
					<string>keyword.operator.ternary.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\|\||&amp;&amp;|!)</string>
					<key>name</key>
					<string>keyword.operator.boolean.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:-&gt;|&lt;-|--&gt;)</string>
					<key>name</key>
					<string>keyword.operator.arrow.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:&gt;|&lt;|&gt;=|&lt;=|==|!=|\.&gt;|\.&lt;|\.&gt;=|\.&gt;=|\.==|\.!=|\.=|\.!|&lt;:|:&gt;)</string>
					<key>name</key>
					<string>keyword.operator.relation.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?::)</string>
					<key>name</key>
					<string>keyword.operator.range.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:&lt;&lt;|&gt;&gt;)</string>
					<key>name</key>
					<string>keyword.operator.shift.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\||\&amp;|~)</string>
					<key>name</key>
					<string>keyword.operator.bitwise.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\+|-|\*|\.\*|/|\./|//|\.//|%|\.%|\\|\.\\|\^|\.\^)</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:::)</string>
					<key>name</key>
					<string>keyword.operator.isa.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?:\.(?=[a-zA-Z])|\.\.+)</string>
					<key>name</key>
					<string>keyword.operator.dots.julia</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;=\w)'</string>
					<key>name</key>
					<string>keyword.operator.transpose.julia</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b\w+"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"\w*</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.custom-double.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_custom_escaped_char</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>`</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.julia</string>
						</dict>
					</dict>
					<key>end</key>
					<string>`</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.julia</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.julia</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>string_custom_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\"</string>
					<key>name</key>
					<string>constant.character.escape.julia</string>
				</dict>
			</array>
		</dict>
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|.)</string>
					<key>name</key>
					<string>constant.character.escape.julia</string>
				</dict>
			</array>
		</dict>
		<key>type_decl</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.type.julia</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.julia</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.julia</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.inheritance.julia</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(type)\s+([a-zA-Z0-9_]+)(\s*(&lt;:)\s*[.a-zA-Z0-9_:]+)?</string>
					<key>name</key>
					<string>meta.type.julia</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.type.julia</string>
						</dict>
					</dict>
					<key>comments</key>
					<string>Matches a typed variable, such as 'id::String'</string>
					<key>match</key>
					<string>([a-zA-Z0-9_]+)(::[a-zA-Z0-9_]+)</string>
					<key>name</key>
					<string>other.typed-variable.julia</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.julia</string>
	<key>uuid</key>
	<string>F5D95417-DF9F-48AD-92DF-21CE62F7C31B</string>
</dict>
</plist>
